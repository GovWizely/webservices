require 'elasticsearch/persistence/model'
require 'analyzers'
module Webservices
  module ApiModels
    Class.new do
      def self.model_name
        ActiveModel::Name.new(self, Webservices::ApiModels, '<%= data_source.api.classify %>')
      end

      include Elasticsearch::Persistence::Model

      settings(index: { analysis: { analyzer: { keyword_lowercase: Analyzers.definitions[:keyword_lowercase]}}})
      index_name [ES::INDEX_PREFIX, "api_models", '<%= data_source.api %>', 'v<%= data_source.version_number %>'].join(':')

      <% data_source.metadata.entries.each_pair do |field, metadata| %>
        <% if TYPE_TO_MAPPING[metadata[:type]][:mapping].present? %>
          attribute :<%= field %>, <%= TYPE_TO_MAPPING[metadata[:type]][:type] %>, mapping: <%= TYPE_TO_MAPPING[metadata[:type]][:mapping] %>
        <% else %>
          attribute :<%= field %>, <%= TYPE_TO_MAPPING[metadata[:type]][:type] %>
        <% end %>
      <% end %>
      attribute :_updated_at, DateTime

      def attributes
        hash = {}
        <% data_source.metadata.entries.each_key do |field| %>
          hash['<%= field %>'] = nil
        <% end %>
        hash
      end
    end
  end
end
